    ; assembly                                       | /* r2dec pseudo code output */
                                                     | /* testsuite @ 0x0 */
                                                     | #include <stdint.h>
                                                     |  
    ; (fcn) sub.Good_Job_401000 ()                   | int32_t Good_Job_401000 (int32_t arg_8h, int32_t arg_ch) {
                                                     |     do {
                                                     |         /* [00] -r-x section size 4096 named .text */
    0x00401000 push ebp                              |         
    0x00401001 mov ebp, esp                          |         
    0x00401003 push ebx                              |         
    0x00401004 push esi                              |         
    0x00401005 push edi                              |         
    0x00401006 cmp dword [ebp + 8], 2                |         
                                                     |         if (arg_8h == 2) {
    0x0040100a jne 0x40105e                          |             
    0x0040100c xor eax, eax                          |             eax = 0;
                                                     |             if (arg_8h != 2) {
    0x0040100e je 0x401011                           |                 
    0x00401010 call 0x8b4c55a0                       |                 void (*0x8b4c55a0)() ();
                                                     |             }
    0x00401011 mov eax, dword [ebp + 0xc]            |             eax = arg_ch;
    0x00401014 mov ecx, dword [eax + 4]              |             ecx = *((int32_t*) (eax + 4));
    0x00401017 movsx edx, byte [ecx]                 |             edx = *((int8_t*) ecx);
    0x0040101a cmp edx, 0x70                         |             
                                                     |             if (edx == 0x70) {
    0x0040101d jne 0x40105e                          |                 
    0x0040101f xor eax, eax                          |                 eax = 0;
                                                     |                 if (edx != 0x70) {
    0x00401021 je 0x401024                           |                     
    0x00401023 call 0x8b4c55b3                       |                     void (*0x8b4c55b3)() ();
                                                     |                 }
    0x00401024 mov eax, dword [ebp + 0xc]            |                 eax = arg_ch;
    0x00401027 mov ecx, dword [eax + 4]              |                 ecx = *((int32_t*) (eax + 4));
    0x0040102a movsx edx, byte [ecx + 2]             |                 edx = *((int8_t*) (ecx + 2));
    0x0040102e cmp edx, 0x71                         |                 
                                                     |                 if (edx != 0x71) {
    0x00401031 jne 0x40105e                          |                     goto label_0;
                                                     |                 }
    0x00401032 sub esi, dword [ebx]                  |                 esi -= *((int32_t*) ebx);
    0x00401033 xor eax, eax                          |                 eax = 0;
                                                     |                 if (esi != 0) {
    0x00401035 je 0x401038                           |                     
    0x00401037 call 0x8b4c55c7                       |                     void (*0x8b4c55c7)() ();
                                                     |                 }
    0x00401038 mov eax, dword [ebp + 0xc]            |                 eax = arg_ch;
    0x0040103b mov ecx, dword [eax + 4]              |                 ecx = *((int32_t*) (eax + 4));
    0x0040103c dec eax                               |                 eax--;
    0x0040103d add al, 0xf                           |                 al += 0xf;
    0x0040103f mov esi, 0xfa830151                   |                 esi = 0xfa830151;
                                                     |                 if (al != 0) {
    0x00401044 jne 0x40105e                          |                     goto label_0;
                                                     |                 }
    0x00401047 xor eax, eax                          |                 eax = 0;
                                                     |                 if (al != 0) {
    0x00401049 je 0x40104c                           |                     
    0x0040104b call 0x407020b8                       |                     void (*0x407020b8)() ();
                                                     |                 }
    0x0040104c push 0x403010                         |                 
    0x00401051 call dword [0x402000]                 |                 eax = printf ("Good Job!");
    0x00401057 add esp, 4                            |                 
    0x0040105a xor eax, eax                          |                 eax = 0;
    0x0040105c jmp 0x401073                          |                 
                                                     |             }
                                                     |         } else {
                                                     | label_0:
    0x0040105e xor eax, eax                          |             eax = 0;
                                                     |             if (al != 0) {
    0x00401060 je 0x401063                           |                 
    0x00401062 call 0x40702ccf                       |                 void (*0x40702ccf)() ();
                                                     |             }
    0x00401063 push 0x40301c                         |             
    0x00401068 call dword [0x402000]                 |             eax = printf ("Son, I am disappoint.");
    0x0040106e add esp, 4                            |             
    0x00401071 xor eax, eax                          |             eax = 0;
                                                     |         }
    0x00401073 pop edi                               |         
    0x00401074 pop esi                               |         
    0x00401075 pop ebx                               |         
    0x00401076 pop ebp                               |         
    0x00401077 ret                                   |         return eax;
    0x004010a7 and byte [eax], al                    |         *((int8_t*) eax) &= al;
    0x004010aa pop ecx                               |         
    0x004010ab or dword [0x403050], 0xffffffff       |         *((int32_t*) 0x403050) |= 0xffffffff;
    0x004010b2 or dword [0x403054], 0xffffffff       |         *((int32_t*) 0x403054) |= 0xffffffff;
    0x004010b9 call dword [0x402028]                 |         _p_fmode ();
    0x004010bf mov ecx, dword [0x40304c]             |         ecx = *((int32_t*) 0x40304c);
    0x004010c5 mov dword [eax], ecx                  |         *((int32_t*) eax) = ecx;
    0x004010c7 call dword [0x402024]                 |         _p_commode ();
    0x004010cd mov ecx, dword [0x403048]             |         ecx = *((int32_t*) 0x403048);
    0x004010d3 mov dword [eax], ecx                  |         *((int32_t*) eax) = ecx;
    0x004010d5 mov eax, dword [0x402020]             |         eax = imp.MSVCRT.dll__adjust_fdiv;
    0x004010da mov eax, dword [eax]                  |         eax = *((int32_t*) eax);
    0x004010dc mov dword [0x403058], eax             |         *((int32_t*) 0x403058) = eax;
    0x004010e1 call 0x4011a9                         |         fcn_004011a9 ();
    0x004010e6 cmp dword [0x403034], 0               |         
                                                     |         if (*((int32_t*) 0x403034) == 0) {
    0x004010ed jne 0x4010fb                          |             
    0x004010ef push 0x4011a6                         |             
    0x004010f4 call dword [0x40201c]                 |             _setusermatherr (0x4011a6);
    0x004010fa pop ecx                               |             
                                                     |         }
    0x004010fb call 0x401194                         |         fcn_00401194 ();
    0x00401100 push 0x40300c                         |         
    0x00401105 push 0x403008                         |         
    0x0040110a call 0x40118e                         |         _initterm_40118e (0x403008, 0x40300c);
    0x0040110f mov eax, dword [0x403044]             |         eax = *((int32_t*) 0x403044);
    0x00401114 mov dword [ebp - 0x28], eax           |         *((int32_t*) (ebp - 0x28)) = eax;
    0x00401117 lea eax, [ebp - 0x28]                 |         
    0x0040111a push eax                              |         
    0x0040111b push dword [0x403040]                 |         
    0x00401121 lea eax, [ebp - 0x20]                 |         
    0x00401124 push eax                              |         
    0x00401125 lea eax, [ebp - 0x2c]                 |         
    0x00401128 push eax                              |         
    0x00401129 lea eax, [ebp - 0x1c]                 |         
    0x0040112c push eax                              |         
    0x0040112d call dword [0x402014]                 |         _getmainargs (ebp - 0x1c, ebp - 0x2c, ebp - 0x20, *((uint32_t*) 0x403040), ebp - 0x28);
    0x00401133 push 0x403004                         |         
    0x00401138 push 0x403000                         |         
    0x0040113d call 0x40118e                         |         _initterm_40118e (0x403000, 0x403004);
    0x00401142 call dword [0x402010]                 |         _p_initenv ();
    0x00401148 mov ecx, dword [ebp - 0x20]           |         ecx = *((int32_t*) (ebp - 0x20));
    0x0040114b mov dword [eax], ecx                  |         *((int32_t*) eax) = ecx;
    0x0040114d push dword [ebp - 0x20]               |         
    0x00401150 push dword [ebp - 0x2c]               |         
    0x00401153 push dword [ebp - 0x1c]               |         
    0x00401156 call 0x401000                         |         eax = Good_Job_401000 (*((uint32_t*) (ebp - 0x1c)), *((uint32_t*) (ebp - 0x2c)), *((uint32_t*) (ebp - 0x20)));
                                                     |     } while (1);
    0x0040115b add esp, 0x30                         |     
    0x0040115e mov dword [ebp - 0x24], eax           |     *((int32_t*) (ebp - 0x24)) = eax;
    0x00401161 push eax                              |     
    0x00401162 call dword [0x40200c]                 |     exit (eax);
    0x00401168 mov eax, dword [ebp - 0x14]           |     eax = *((int32_t*) (ebp - 0x14));
    0x0040116b mov ecx, dword [eax]                  |     ecx = *((int32_t*) eax);
    0x0040116d mov ecx, dword [ecx]                  |     ecx = *((int32_t*) ecx);
    0x0040116f mov dword [ebp - 0x30], ecx           |     *((int32_t*) (ebp - 0x30)) = ecx;
    0x00401172 push eax                              |     
    0x00401173 push ecx                              |     
    0x00401174 call 0x401188                         |     _XcptFilter_401188 (ecx, eax);
    0x00401179 pop ecx                               |     
    0x0040117a pop ecx                               |     
    0x0040117b ret                                   |     return eax;
                                                     | }
